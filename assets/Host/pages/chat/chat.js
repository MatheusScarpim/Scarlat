const express = require('express');
var router = express.Router();
const bodyParser = require('body-parser');
const criarConexao = require('../../DB/BancoDeDados');

let cachedClient = null;
let cachedDb = null;
let entradaCount = 0;
const MAX_ENTRADAS = 10;

router.use(bodyParser.urlencoded({
	extended: true
}));

router.get('/chat/:protocolo/:numero/:nome', async function (req, res) {
	const protocolo = req.params.protocolo;
	const numero = req.params.numero;
	const nome = req.params.nome;
	console.log(numero)

	let protocolos = await obterDadosProtocolos("A")

	obterDadosDaColecaoMensagens(protocolo)
		.then(mensagens => {
			alterarNaoLidos(protocolo)
			res.render(__dirname + '/index.ejs', {
				protocolo: mensagens,
				protocolos: protocolos
			});
		})
		.catch(error => {
			// Trate os erros conforme necessÃ¡rio
			console.error(error);
			res.status(500).send('Erro ao obter mensagens.');
		});
});

function obterDadosDaColecaoMensagens(protocolo) {
	return new Promise(async (resolve, reject) => {
		try {
			const db = await obterCliente();
			const collection = db.collection('MENSAGENS');
			const data = await collection.find({
				PROTOCOLO_ID: parseInt(protocolo)
			}).toArray();
			resolve(data);
		} catch (error) {
			reject(error);
		}
	});
}

async function obterDadosProtocolos(status) {
	let retorno = [];
	const db = await obterCliente();
	const collectionProtocolos = db.collection('PROTOCOLOS');

	const dataProtocolos = await collectionProtocolos.find({
		STATUS: status.toString(),
	}).toArray();
	const collectionMensagem = db.collection('MENSAGENS');

	await Promise.all(dataProtocolos.map(async (elemento) => {
		try {
			let ultimaMensagem = await collectionMensagem.find({
				PROTOCOLO_ID: parseInt(elemento["_id"]),
			}).sort({
				DATA_ENVIO: -1
			}).limit(1).toArray();

			if (ultimaMensagem.length > 0) {
				ultimaMensagem = ultimaMensagem[0];

				retorno.push({
					PROTOCOLO_ID: elemento["_id"],
					NOME: elemento["NOME"],
					FOTOPERFIL: elemento["FOTOPERFIL"] ? elemento["FOTOPERFIL"] : "",
					NUMERO: formatarNumero(elemento["NUMERO"]),
					NAO_LIDAS: await collectionMensagem.countDocuments({
						PROTOCOLO_ID: parseInt(elemento["_id"]),
						LIDA: "false"
					}),
					DATA_CRIACAO: elemento["DATA_CRIACAO"],
					ULTIMO_CONTATO: elemento["ULTIMO_CONTATO"],
					ULTIMA_MENSAGEM: ultimaMensagem.MENSAGEM
				});
			}
		} catch (error) {
			console.error("Error fetching data for Protocolo ID:", elemento["_id"], error);
		}
	}));
	retorno.sort((a, b) => b.NAO_LIDAS - a.NAO_LIDAS);
	return retorno;
}

function formatarNumero(numero) {
	const numeroSemPrefixo = numero.replace("@c.us", "");

	return numeroSemPrefixo;
}

async function alterarNaoLidos(protocolo) {
	try {
		const db = await obterCliente();
		const collection = db.collection('MENSAGENS');
		await collection.updateMany({
			PROTOCOLO_ID: parseInt(protocolo),
			LIDA: "false"
		}, {
			$set: {
				LIDA: "true"
			}
		});
		return {
			"status": "sucesso"
		}
	} catch (error) {
		console.log(error);
	}
	return {
		"status": "ERRO"
	}
}


async function obterCliente() {
	if (!cachedClient || !cachedDb) {
		let client = await criarConexao.Client();
		cachedDb = client.db('ScarlatDataBase');
	}
	return cachedDb;
}

module.exports = router;